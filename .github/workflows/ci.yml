name: CI Pipeline

# Trigger the pipeline on push to main branch or pull request to main branch
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

# Jobs to run
jobs:
  build-and-push:
    # Set up the job to run on Ubuntu
    runs-on: ubuntu-latest

    steps:
      # run the checkout action to get the code
      - name: Checkout code
        uses: actions/checkout@v2
      
      # Set up JDK and Node.js
      - name: Set up JDK
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: '17'
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
      
      # Install dependencies
      - name: Install dependencies
        run: npm install
      
      # Linting section
      - name: Run Lint
        run: npm run lint
      
      # Frontend tests section
      # - name: Run Unit Tests
      #   run: npm run test
      
      # Backend tests section 
      - name: Install backend dependencies
        run: ./gradlew clean build

      - name: Run backend tests
        run: ./gradlew test

      # Build and push Docker image
      - name: Build Docker image
        run: |
          echo "Building Docker image with the 'latest' tag..."
          ./gradlew -Pprod clean bootJar
          ./gradlew -Pprod bootJar jibDockerBuild

      - name: Check if Docker image exists
        run: |
          IMAGE_NAME="ecommmm"
          if [[ "$(docker images -q $IMAGE_NAME 2> /dev/null)" == "" ]]; then
              echo "Error: Local Docker image '$IMAGE_NAME' not found."
              exit 1
          fi

      - name: Tag Docker image as 'latest'
        run: |
          IMAGE_NAME="ecommmm"
          DOCKER_HUB_REPO="romainmiras/ecommmm"
          echo "Tagging Docker image as 'latest'..."
          docker tag $IMAGE_NAME $DOCKER_HUB_REPO:latest

      - name: Push Docker image to Docker Hub
        run: |
          DOCKER_HUB_REPO="romainmiras/ecommmm"
          echo "Pushing Docker image to Docker Hub..."
          docker login --username ${{ secrets.DOCKER_USERNAME }} --password ${{ secrets.DOCKER_PASSWORD }}
          docker push $DOCKER_HUB_REPO:latest
